image: "saclient:latest"

# The options to sevSecGw are highIssues, mediumIssues, lowIssues and totalIssues
# maxIssuesAllowed is the amount of issues in selected sevSecGw

variables:
  sevSecGw: totalIssues
  maxIssuesAllowed: 200
  appKey: $ASOC_KEY
  appSecret: $ASOC_SECRET
  appID: $APP_ID

stages:
  - scan-sast
  
workflow:
  rules:
    - if: $CI_PIPELINE_SOURCE == 'merge_request_event'

scan-job:
  stage: scan-sast
  script:
  # Generate IRX files based on source root folder downloaded by Gitlab
  - appscan.sh prepare
  # Authenticate in ASoC
  - appscan.sh api_login -u $appKey -P $appSecret -persist
  # Upload IRX file to ASoC to be analyzed and receive scanId
  - appscan.sh queue_analysis -a $appID >> output.txt
  - cat output.txt
  - scanIdSCA=$(sed -n '3p' output.txt)
  - scanIdSAST=$(sed -n '5p' output.txt)
  # Check scanId for scan status to be Ready
  - >
    for x in $(seq 1 1000)
      do
        resultScanSAST=$(appscan.sh status -i $scanIdSAST)
        resultScanSCA=$(appscan.sh status -i $scanIdSCA)
        echo "SAST scan status: $resultScanSAST"
        echo "SCA scan status: $resultScanSCA" 
        if [ "$resultScanSAST" == "Ready" ] && [ "$resultScanSCA" == "Ready" ]
          then break 
        fi
        sleep 60
      done
  # Get report from ASoC
  - appscan.sh get_result -i $scanIdSCA -t html -d ./SCA_Report.html
  - appscan.sh get_result -i $scanIdSAST -t html -d ./SAST_Report.html
  # Get scan summary for both SCA and SAST scans 
  - appscan.sh info -i $scanIdSCA > scanStatusSCA.txt
  - appscan.sh info -i $scanIdSAST > scanStatusSAST.txt
  # Extract issue counts for SCA
  - highIssuesSCA=$(cat scanStatusSCA.txt | grep LatestExecution | grep -oP '(?<="NHighIssues":)[^,]*')
  - mediumIssuesSCA=$(cat scanStatusSCA.txt | grep LatestExecution | grep -oP '(?<="NMediumIssues":)[^,]*')
  - lowIssuesSCA=$(cat scanStatusSCA.txt | grep LatestExecution | grep -oP '(?<="NLowIssues":)[^,]*')
  - totalIssuesSCA=$(cat scanStatusSCA.txt | grep LatestExecution | grep -oP '(?<="NIssuesFound":)[^,]*')

  # Extract issue counts for SAST
  - highIssuesSAST=$(cat scanStatusSAST.txt | grep LatestExecution | grep -oP '(?<="NHighIssues":)[^,]*')
  - mediumIssuesSAST=$(cat scanStatusSAST.txt | grep LatestExecution | grep -oP '(?<="NMediumIssues":)[^,]*')
  - lowIssuesSAST=$(cat scanStatusSAST.txt | grep LatestExecution | grep -oP '(?<="NLowIssues":)[^,]*')
  - totalIssuesSAST=$(cat scanStatusSAST.txt | grep LatestExecution | grep -oP '(?<="NIssuesFound":)[^,]*')

  # Combine issues from both SAST and SCA scans
  - highIssues=$(($highIssuesSCA + $highIssuesSAST))
  - mediumIssues=$(($mediumIssuesSCA + $mediumIssuesSAST))
  - lowIssues=$(($lowIssuesSCA + $lowIssuesSAST))
  - totalIssues=$(($totalIssuesSCA + $totalIssuesSAST))
  - echo "Total issues -> $totalIssues"
  - >
    if [ "$highIssues" -gt "$maxIssuesAllowed" ] && [ "$sevSecGw" == "highIssues" ]
      then
        echo "There are $highIssues high issues, $mediumIssues medium issues and $lowIssues low issues"
        echo "The company policy permits less than $maxIssuesAllowed $sevSecGw severity"
        echo "Failed"
        exit 1
    elif [ "$mediumIssues" -gt "$maxIssuesAllowed" ] && [ "$sevSecGw" == "mediumIssues" ]
      then
        echo "There are $highIssues high issues, $mediumIssues medium issues and $lowIssues low issues"
        echo "The company policy permits less than $maxIssuesAllowed $sevSecGw severity"
        echo "Failed"
        exit 1
    elif [ "$lowIssues" -gt "$maxIssuesAllowed" ] && [ "$sevSecGw" == "lowIssues" ]
      then
        echo "There are $highIssues high issues, $mediumIssues medium issues and $lowIssues low issues"
        echo "The company policy permits less than $maxIssuesAllowed $sevSecGw severity"
        echo "Failed"
        exit 1
    elif [ "$totalIssues" -gt "$maxIssuesAllowed" ] && [ "$sevSecGw" == "totalIssues" ]
      then
        echo "There are $highIssues high issues, $mediumIssues medium issues and $lowIssues low issues"
        echo "The company policy permits less than $maxIssuesAllowed $sevSecGw severity"
        echo "Failed"
        exit 1
    fi
  - echo "There are $highIssues high issues, $mediumIssues medium issues and $lowIssues low issues"
  - echo "The company policy permits less than $maxIssuesAllowed $sevSecGw severity"
  - echo "Passed"
  
  artifacts:
    when: always
    paths:
      - "SCA_Report.html"
      - "SAST_Report.html"
